'use strict';

var fs = require('fs');
var url = require('url');
var Promise = require('promise');
var request = Promise.denodeify(require('request'));
var parseDOM = require('htmlparser2').parseDOM;

var page = '/'
function getPage(url) {
  return request(url).then(function (res) {
    if (res.statusCode !== 200) {
      throw new Error('Invalid status code ' + res.statusCode);
    }
    return res.body.toString();
  }).then(parseDOM).then(parseSections.bind(null, url))
}

var pages = [
  'http://docs.mongodb.org/manual/reference/operator/query/',
  'http://docs.mongodb.org/manual/reference/operator/update/',
  'http://docs.mongodb.org/manual/reference/operator/aggregation/',
  'http://docs.mongodb.org/manual/reference/operator/query-modifier/'
];
Promise.all(pages.map(getPage)).then(function (pages) {
  return normalize(pages.reduce(function (acc, page) {
    return acc.concat(page);
  }, []))
}).done(function (output) {
  fs.writeFileSync(__dirname + '/index.js', '"use strict";\n// this file is auto-generated by build.js\nmodule.exports = ' + JSON.stringify(output, null, '  ') + ';');
  fs.writeFileSync(__dirname + '/data.json', JSON.stringify(output, null, '  '));
})

function normalize(sections) {
  if (Array.isArray(sections)) {
    var res = {};
    for (var i = 0; i < sections.length; i++) {
      res[sections[i].id] = normalize(sections[i]);
    }
    return res;
  } else if (sections.table) {
    return sections.table;
  } else if (sections.children) {
    return normalize(sections.children);
  }
}
function parseSections(page, body) {
  if (Array.isArray(body)) {
    return body.map(parseSections.bind(this, page)).reduce(function (a, b) {
      return a.concat(b);
    }, []);
  }
  var className = body.type === 'tag' && body.attribs && body.attribs.class;
  if (className && /\bsection\b/.test(className) && body.attribs.id) {
    var children = body.children && parseSections(page, body.children);
    if (children.length) {
      return [{
        id: body.attribs.id,
        children: children
      }]
    } else {
      return [{
        id: body.attribs.id,
        table: getByTagType(body, 'tbody')
          .map(tagType('tr'))
          .reduce(function (a,b) {
            return a.concat(b);
          }, [])
          .map(tagType('td'))
          .map(function (row) {
            var cells = row.map(getText);
            var a = getByTagType(row, 'a')[0];
            var href = page;
            if (a && a.attribs && a.attribs.href) {
              href = url.resolve(page, a.attribs.href);
            }
            return {
              name: cells[0],
              description: cells[1],
              href: href
            };
          })
      }]
    }
  }
  if (body.children) {
    return parseSections(page, body.children);
  }
  return [];
}

function tagType(tag) {
  return function (body) {
    return getByTagType(body, tag);
  }
}

function getById(parent, id) {
  if (Array.isArray(parent)) {
    for (var i = 0; i < parent.length; i++) {
      var val = getById(parent[i], id);
      if (val) return val;
    }
    return null;
  }
  if (parent.attribs
  && parent.attribs.id
  && parent.attribs.id.toLowerCase() === id.toLowerCase()) {
    return parent;
  }
  if (parent.children) {
    return getById(parent.children, id);
  }
  return null;
}
function getByTagType(parent, tagType) {
  if (Array.isArray(parent)) {
    return parent.map(function (child) {
      return getByTagType(child, tagType);
    }).reduce(function (acc, val) {
      return acc.concat(val);
    }, [])
  }
  if (parent.type === 'tag'
  && parent.name.toLowerCase() === tagType.toLowerCase()) {
    return [parent];
  }
  if (parent.children) {
    return getByTagType(parent.children, tagType);
  }
  return [];
}
function getText(parent) {
  if (Array.isArray(parent)) {
    return parent.map(function (child) {
      return getText(child);
    }).reduce(function (acc, val) {
      return acc + val;
    }, '')
  }
  if (parent.type === 'text') {
    return parent.data;
  }
  if (parent.children) {
    return getText(parent.children);
  }
  return '';
}